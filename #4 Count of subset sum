// #4 count of subset sum
// Perfect Sum Problem
// https://practice.geeksforgeeks.org/problems/perfect-sum-problem5633/1#

/*

// if arr[i] > 0

class Solution
{

	public:
	int perfectSum(int a[], int n, int sum)
	{
        	int i,j;
        	int[] arr=a;
        	int dp[n+1][sum+1];
        	for(i=0;i<=n;i++)
        	{
        	    for(j=0;j<=sum;j++)
       	    {
               	 if(i==0)
               	     dp[i][j]=0;
                	 if(j==0)
                    		dp[i][j]=1;
	            }
        	}
        
        	for(i=1;i<=n;i++)
        	{
        	    for(j=1;j<=sum;j++)
        	    {
        	        if(arr[i-1]<=j)
        	            dp[i][j]= dp[i-1][j-arr[i-1]]  + dp[i-1][j]%mod;
        	        else
        	            dp[i][j]=dp[i-1][j];   
        	    }
        	}
        	return dp[n][sum];
	}
	  
};



*/


class Solution{

	public:
	int perfectSum(int a[], int n, int sum)
	{
        // Your code goes here
        
        int i,j,mod=1000000007;
        vector<int> arr;
        int cnt=0;
        for(i=0;i<n;i++)
        {
            if(a[i]==0)
                cnt++;
            else
                arr.push_back(a[i]);
        }
        n=arr.size();
        
        int dp[n+1][sum+1];
        for(i=0;i<=n;i++)
        {
            for(j=0;j<=sum;j++)
            {
                if(i==0)
                    dp[i][j]=0;
                if(j==0)
                    dp[i][j]=1;
                    
            }
        }
        
        for(
            for(j=1;j<=sum;j++)
            {
                if(arr[i-1]<=j)
                    dp[i][j]=( (dp[i-1][j-arr[i-1]] % mod) + (dp[i-1][j]%mod) )%mod;
                else
                    dp[i][j]=dp[i-1][j]%mod;
                
            }
        }
        
        
        if(cnt==0)
            return dp[n][sum];
        else
            return ( ( (int)pow(2,cnt) % mod )*( dp[n][sum]%mod ) ) % mod;
        
	}
	  
};
